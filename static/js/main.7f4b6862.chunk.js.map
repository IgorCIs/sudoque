{"version":3,"sources":["components/ui/Notes.js","components/ui/Cell.js","hotkeys/index.js","components/ui/Board.js","store/constans.js","store/actions.js","components/ui/NewGame.js","components/ui/Numpad.js","components/ui/Controlls.js","components/ui/Interface.js","libs/boards/index.js","libs/boards/easy.js","libs/boards/hard.js","libs/boards/medium.js","libs/boards/expert.js","components/Containers.js","components/App.js","libs/XY.js","libs/arrayHelpers.js","store/reducers.js","store/index.js","index.js"],"names":["Note","_ref","value","react_default","a","createElement","className","Notes","_ref2","values","some","v","map","i","Notes_Note","key","Value","Cell","selected","conflict","same","nearby","notes","fixed","_ref2$onClick","onClick","f","concat","Cell_Value","ui_Notes","keyMap","Object","objectSpread","MOVE_LEFT","MOVE_RIGHT","MOVE_BOTTOM","MOVE_TOP","CHANGE_INPUT_TYPE","UNDO","Array","fill","reduce","prev","n","defineProperty","Board","cells","selectedCell","notesInput","started","_ref$onSolve","onSolve","_ref$selectCell","selectCell","_ref$setCellValue","setCellValue","_ref$toggleInput","toggleInput","hotkeys","e","id","every","cell","index_es","handlers","ui_Cell","assign","constans","toggleInputType","type","c","data","Easy","Medium","Hard","Expert","Option","_ref$onClick","NewGame","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","opened","toggleOpened","bind","assertThisInitialized","setState","difficulty","_this2","newGame","_this3","keys","k","NewGame_Option","startNewGame","Component","Button","Numpad","toConsumableArray","item","Numpad_Button","Toggler","text","Controlls","_ref2$clearClick","clearClick","_ref2$notesClick","notesClick","buttons","cb","button","Controlls_Toggler","Interface","game","_ref$newGame","ui_NewGame","ui_Numpad","ui_Controlls","boards","easy","hard","medium","expert","setValueCell","dispatch","setNoteValue","onCellSetValue","CellsBoard","connect","find","InterfaceControlls","board","scheme","Math","floor","random","length","split","App","Fragment","Containers_InterfaceControlls","getPositionByIndex","index","y","x","quad","row","ceil","col","isNearby","selectedIndex","currentIndex","selXY","curXY","current","getNearbyCells","cellList","filter","replaceItems","arr","newArr","arguments","undefined","action","indexOf","valueToCompare","initialState","store","composeWithDevTools","applyMiddleware","next","result","localStorage","JSON","stringify","getState","createStore","combineReducers","reducers","parse","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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AsF,IAAnF8C,EAAmF9C,EAAnF8C,aAAcD,EAAqE7C,EAArE6C,MAAOwE,EAA8DrH,EAA9DqH,KAA8DC,EAAAtH,EAAxD6F,eAAwD,IAAAyB,EAAhD,SAAA7F,GAAC,OAAEA,GAA6C6F,EAAA/D,EAAAvD,EAA1CwD,mBAA0C,IAAAD,EAA9B,SAAA9B,GAAC,OAAEA,GAA2B8B,EAAAF,EAAArD,EAAxBsD,oBAAwB,IAAAD,EAAX,SAAA5B,GAAC,OAAEA,GAAQ4B,EACpG,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAACmH,EAAD,CAAS1B,QAASA,IAClB3F,EAAAC,EAAAC,cAACoH,EAAD,CAAQhG,QAAS,SAAAvB,GAAK,OAAI6C,GAAgBQ,EAAaR,EAAc7C,EAAO4C,EAAOwE,EAAKtE,eACxF7C,EAAAC,EAAAC,cAACqH,EAAD3F,OAAAmC,OAAA,CACQ4C,WAAY,kBAAM/D,GAAgBQ,EAAaR,EAAc,EAAGD,EAAOwE,EAAKtE,aAC5EgE,WAAYvD,GACR6D,OCTTK,EAAA,CACXC,KCPW,CACb,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA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","file":"static/js/main.7f4b6862.chunk.js","sourcesContent":["import React from 'react'\nimport '../../styles/Notes.sass'\n\nconst Note = ({ value }) => (\n    <div className='note'>\n        { +value ? value : ''}\n    </div>\n)\n\nconst Notes = ({ values }) => {\n    return (\n        values.some(v => !!v) ?\n            <div className='notes'>\n                {values.map((value, i) => \n                    <Note value={value} key={i}/>\n                )}\n            </div> : ''\n    )\n}\n\nexport default Notes","import React from 'react'\nimport '../../styles/Cell.sass'\nimport Notes from './Notes';\nimport PropTypes from 'prop-types'\n\n\nconst Value = ({ value }) => {\n    return ( \n        <div className='value'>\n            {+value ? value : ''}\n        </div>\n    )\n}\n\nconst Cell = ({ selected, conflict, same, nearby, value, notes, fixed, onClick=f=>f }) => {\n    return (\n        <div onClick={onClick}\n            className={`cell ${selected ? 'selected' : ''}\n                        ${nearby ? 'nearby' : ''}\n                        ${conflict ? 'conflict' : ''}\n                        ${same ? 'same' : ''}\n                        ${fixed ? 'fixed' : ''}\n            `}>\n            {value ? \n                <Value value={value}/>  \n                :\n                <Notes values={notes}/>\n            }\n        </div>\n    )\n}\n\nCell.propTypes = {\n    selected: PropTypes.bool,\n    conflict: PropTypes.bool,\n    same: PropTypes.bool,\n    nearby: PropTypes.bool,\n    value: PropTypes.number,\n    onClick: PropTypes.func\n}\n\nexport default Cell\n","const keyMap = {\n    MOVE_LEFT: 'left',\n    MOVE_RIGHT: 'right',\n    MOVE_BOTTOM: 'down',\n    MOVE_TOP: 'up',\n    CHANGE_INPUT_TYPE: 'n',\n    UNDO: 'backspace',\n\n    ...Array(11).fill(0).reduce((prev, n, i) => ({\n        ...prev ,[`SET_VALUE_${i - 1}`]: i - 1 + ''\n    })) \n}\n\nexport {\n    keyMap\n}   ","import React from 'react'\nimport './../../styles/Board.sass'\nimport Cell from './Cell';\nimport PropTypes from 'prop-types'\nimport { HotKeys } from 'react-hotkeys'\nimport { keyMap } from '../../hotkeys';\n\nconst Board = ({ cells, selectedCell, notesInput, started, onSolve=f=>f, selectCell=f=>f, setCellValue=f=>f, toggleInput=f=>f }) => {\n    const hotkeys = {\n        ...Array(11).fill(0).reduce((prev, n, i) => ({\n            ...prev,\n            [`SET_VALUE_${i - 1}`]: e => setCellValue(selectedCell, i - 1, cells, notesInput)\n        })),\n        MOVE_LEFT: () => selectCell(cells[selectedCell.id - 1]),\n        MOVE_RIGHT: () => selectCell(cells[selectedCell.id + 1]),\n        MOVE_BOTTOM: () => selectCell(cells[selectedCell.id + 9]),\n        MOVE_TOP: () => selectCell(cells[selectedCell.id - 9]),\n        CHANGE_INPUT_TYPE: () => toggleInput(),\n    }\n    \n    cells.every(cell => cell.value && !cell.conflict) && onSolve()\n\n    return (\n        <HotKeys className='board' handlers={hotkeys} keyMap={keyMap}>\n            {cells.map(cell => (\n                <Cell {...cell}\n                    onClick={() => started && selectCell(cell)}\n                    key={cell.id}\n                />\n            ))}\n        </HotKeys>\n    )\n}\n\nBoard.propTypes = {\n    cells: PropTypes.array,\n    notesInput: PropTypes.bool,\n    selectCell: PropTypes.func,\n    setCellValue: PropTypes.func,\n    toggleInput: PropTypes.func,\n    selectedCell: PropTypes.object,\n}\n\nexport default Board\n","export default {\n    SET_CELL_VALUE: 'SET_CELL_VALUE',\n    ON_SET_VALUE: 'ON_SET_VALUE', \n    SET_NOTE_VALUE: 'SET_NOTE_VALUE', \n    SET_CELL_SELECTED: 'SET_CELL_SELECTED',\n    TOGGLE_INPUT_MODE: 'TOGGLE_INPUT_MODE', \n    CHECK_NEARBY_CELLS: 'CHECK_NEARBY_CELLS',\n    START_GAME: 'START_GAME',\n    NEW_GAME: 'NEW_GAME',\n    ON_SOLVE: 'ON_SOLVE' \n}","import c from \"./constans\";\n\nconst setCellValue = (id, value) =>\n    ({\n        type: c.SET_CELL_VALUE,\n        id,\n        value\n    })\n\nconst onCellSetValue = (cell, value, cells) => \n    ({\n        type: c.ON_SET_VALUE,\n        cell,\n        value,\n        cells\n    })\n\nconst setSelectedCell = (id, value) =>\n    ({\n        type: c.SET_CELL_SELECTED,\n        id,\n        value\n    })\n\nconst toggleInputType = () => \n    ({\n        type: c.TOGGLE_INPUT_MODE\n    })\n\nconst setNoteValue = (id, value) => \n    ({\n        type: c.SET_NOTE_VALUE,\n        id,\n        value \n    })\n\nconst newGame = (scheme) => \n    ({\n        type: c.NEW_GAME,\n        scheme\n    })\n\nconst onSolve = () => \n    ({\n        type: c.ON_SOLVE\n    })\n\nexport {\n    setCellValue,\n    setSelectedCell,\n    onCellSetValue,\n    toggleInputType,\n    setNoteValue,\n    newGame,\n    onSolve\n}","import React, { Component } from 'react'\nimport './../../styles/InterfaceControlls/NewGame.sass'\n\nconst data = {\n    Easy: 'easy',\n    Medium: 'medium',\n    Hard: 'hard',\n    Expert: 'expert',\n}\n\nconst Option = ({ value, onClick=f=>f }) => (\n    <li onClick={onClick} className='option'>\n        {value}\n    </li>\n)\n\nclass NewGame extends Component {\n    constructor(props) {\n        super(props)\n\n        \n        this.state = {\n            opened: false\n        }\n        this.toggleOpened = this.toggleOpened.bind(this)\n    }\n    \n    toggleOpened() {\n        this.setState(state => ({ opened: !state.opened }))\n    }\n\n    startNewGame(difficulty) {\n        return () => {\n            this.props.newGame(difficulty)\n            this.toggleOpened()\n        }\n    }\n\n    render() {\n        const { opened } = this.state\n        \n        return (\n            <div className='newGame'>\n                <div className='button' onClick={this.toggleOpened}> New Game </div>            \n                {opened ?\n                    <ul className='options'>\n                        {Object.keys(data).map((k, i) => (\n                            <Option value={k}   \n                                    onClick={this.startNewGame(data[k])}\n                                    key={i}\n                            />\n                        ))} \n                        <Option value={'cancel'} onClick={this.toggleOpened}/>\n                    </ul> : ''\n                }\n            </div>\n        )\n    } \n}\n\n\nexport default NewGame\n","import React from 'react'\nimport '././../../styles/InterfaceControlls/Numpad.sass'\n\nconst Button = ({ onClick=f=>f, id }) => (\n    <div onClick={onClick} className='item'>\n        {id}\n    </div>\n)\n\nconst Numpad = ({ onClick=f=>f }) => {\n    return (\n        <div className='numpad'>\n            {[...Array(9)].map((item, i) => (\n                <Button key={i}\n                        id={i + 1}\n                        onClick={() => onClick(i + 1)}\n                ></Button>\n            ))}\n        </div>\n    )\n}\n\nexport default Numpad\n\n\n","import React from 'react'\nimport './../../styles/InterfaceControlls/Togglers.sass'\n\n\nconst Toggler = ({ type, text, onClick }) => (\n    <div onClick={onClick} className={`toggler ${type}`}>\n        <div className=\"logo\"></div>\n        <div className=\"text\"> {text} </div>\n\n    </div>\n)\n\nconst Controlls = ({ clearClick=f=>f, notesClick=f=>f, notesInput}) => {\n    const buttons = [\n        {\n            text: 'Notes',\n            type: `notes ${notesInput ? 'active' : ''}`,\n            cb: notesClick\n        },\n        {\n            text: 'Tip',\n            type: 'tip',\n            cb: f=>f\n        },\n        {\n            text: 'Undo',\n            type: 'undo',\n            cb: f=>f\n        },\n        {\n            text: 'Clear',\n            type: 'clear',\n            cb: clearClick \n        },\n    ]\n\n    return (\n        <div className='controlls'>\n            {Object.keys(buttons).map((button, i) => (\n                <Toggler type={buttons[button].type}\n                        key={i}\n                        text={buttons[button].text}\n                        onClick={buttons[button].cb}\n                />\n            ))\n            }        \n        </div>\n    )\n}\n\nexport default Controlls\n","\nimport React from 'react'\nimport NewGame from './NewGame';\nimport Numpad from './Numpad';\nimport Controlls from './Controlls';\nimport './../../styles/InterfaceControlls/InterfaceControlls.sass'\n\nconst Interface = ({ selectedCell, cells, game, newGame=f=>f, toggleInput=f=>f, setCellValue=f=>f }) => {\n    return (\n        <div className='interfaceControlls'>\n            <NewGame newGame={newGame}/>\n            <Numpad onClick={value => selectedCell && setCellValue(selectedCell, value, cells, game.notesInput)}/>\n            <Controlls \n                    clearClick={() => selectedCell && setCellValue(selectedCell, 0, cells, game.notesInput)}\n                    notesClick={toggleInput}\n                    {...game}\n            />\n        </div>\n    )\n}\n\nexport default Interface\n","import easy from \"./easy\";\nimport hard from \"./hard\";\nimport expert from './expert'\nimport medium from './medium'\n\n\nexport default {\n    easy,\n    hard,\n    medium,\n    expert\n}","export default [\n  '370680000100074803008100060720040630030802010015060049080006400403720001000018026',\n  '070009050106070890040150002720040030604000507010060049200036070063020901090400020',\n  '029800060007100390430090002000000901904601207205000000600010045041005700050003610',\n  '109800004060024308030006100306240000080000030000079406003700040801960020700003609',\n  '020800500007020398030000072070000951980601037215000080690000040841060700002003010',\n  '100800504060000098030506102006200950084000230015009400603702040840000020702003009',\n  '904000370200960080710300000603200098802030601470009203000002015020053007049000802',\n  '004500370030900180016000009050010700890030041001080050300000410028003060049006800',\n  '000020300030907000000348509600204708090030040401609003307892000000403060009070000',\n  '900520070000060180010040029653210008002000600400089253360090010028050000040076002',\n  '680005000003006895004010206006037049090204030340590700508040900479300600000700053',\n  '607905000210000090054000076020130040095204130040098060530000920070000081000709403',\n  '680900000010070095004010076806130009005000100300098702530040900470050080000009053',\n  '007905304200076890050800276800007000095060130000500002538001020079350001102709400',\n  '000905014000070805000803270820037500095060130001590062038601000409050000160709000',\n  '007640090460035700000070040008290157001308600592061800010020000004580013050013400',\n  '387040500009030702100870300630290057000000000590061034003027005904080200006010478',\n  '380640090009100080005870306030090157000050000592060030803027900070006200050013078',\n  '380000500400100702105800006008094150000308000092760800800007905904006003006000078',\n  '000900427070004360040078900006000030057406890090000700005290080023600040981003000',\n  '030960000500024008042370900016050204057000890304010750005097180700680009000043070',\n  '108900427500004300042070905810709034000406000390802056405090180003600009981003602',\n  '108905000509124008042000005016709200200000001004802750400000180700681509000503602',\n  '038060000000120068042308905016000000007406800000000750405207180720081000000040670',\n  '073400089800050000502009001610042030004000700050360012400100308000080004380004120',\n  '173400580800700203540009000600042835004000700958360002000100068701003004085004127',\n  '100400000806001200500039071007042830000000000058360400420170008001200904000004007',\n  '103006000890050243040039001000940835000000000958067000400170060761080054000600107',\n  '300100006600589410005004007503000974000402000469000201200700600048956002900003008',\n  '300100506002509403090604000520860970010000060069075081000708050708906100906003008',\n  '300100506070080403190000800500001004800492005400300001001000059708050030906003008',\n  '304100096602089400090004000523800000810492065000005281000700050008950102950003708',\n  '004007090600089410100030807023000974810000065469000280201040009048950002050200700',\n  '907004306000106804000009070000542730742901568053768000030600000501407000408200609',\n  '907804026320070000084000070800542700002000500003768002030000410000090083470203609',\n  '907800026020070090004020005800500730040901060053008002200080400060090080470003609',\n  '907054306320070804084300000000040731002901500153060000000005410501090083408210609',\n  '850040010406003800002800005060900500307405106004008030600001200003600401080050067',\n  '059002600010500000702816900060000520090405080024000030005371208000009050001200360',\n  '000700010410500072702000045008930020007405100020068700640000208270009051080004000',\n  '150300000002010603009460175090800007013504890700009060548091700901040200000008041',\n  '100300409070005083800460170294800010003000800080009364048091006960700050307008001',\n  '000380400000905600800400070200006507013000890705100004040001006001703000007058000',\n  '106387409400010003009400170200800510000504000085009004048001700900040008307658901',\n  '050300420000005680839000100004806017003504800780109300008000736061700000027008040',\n  '000003098703600050400820300008060571064000280271030900002081004040006105610200000',\n  '000743008083000400406800307900000500560197083001000006302001704009000120600254000',\n  '105003090083609000406005007900460500000107000001038006300900704000306120010200809',\n  '005000098080600402490800310000002570060197080071500000052001064809006020610000800',\n  '020740098700000402000005310038060071504107203270030940052900000809000005610054030',\n  '421060309000203406006000080160870004980000073700031062040000900509604000207050648',\n  '401708059800003410006005000000802000082040170000901000000100900039600001210309608',\n  '000760300000290016306015080160870000080040070000031062040120905530084000007059000',\n  '230007080418062007000980002890670200070000060001058074900015000100230859050800021',\n  '230040080408000007700983410894670000073000160000058974082715003100000809050090021',\n  '200000580400060390765980400890001000000429000000300074002015643047030009056000001',\n  '200100000408060300065083010890671230073000160021358074080710640007030809000004001',\n  '200047500400000097765903400800670030070000060020058004002705643140000009006890001',\n  '700900305000510600000730020370081500020603010001270083060049000002057000407006008',\n  '700900045200008600596000020070081000025603710000270080060000257002100006450006008',\n  '700960000034008000090734021079080560025000710041070980160849050000100430000026008',\n  '018902340204018600000704000370080500800000004001070083000809000002150406057306190',\n  '008062040004008609096004020070081060820090014040270080060800250902100400050320100',\n  '049031067850200000007009100004080310700104009015020800003600700000008025190540630',\n  '049030000801000400360409002020005310008060200015900070500602041006000905000040630',\n  '049801067801076000060000102900080010030000050010020004503000040000310905190507630',\n  '040001500800000093060059080004080016730060059610020800080690040470000005002500030',\n  '000001067001200490307400102900080016008104200610020004503002701076008900190500000',\n  '020050608695430200780000000800001490000070000019800003000000026006082374203090050',\n  '301000040605400007000210509007561400402070105009824700108045000900002304040000801',\n  '001059608095030210000210030000560092002000100510024000070045000056080370203690800',\n  '001750040005008207080210039807500402000000000509004703170045020906100300040097800',\n  '320750048000008017704210000807000090002903100010000703000045906950100000240097051',\n  '470800050580900100060700003230504019005000600610208035300007090004001072050002064',\n  '400003900500000147000700203008564010045109620010278400306007000894000002007300004',\n  '070000906580926100001000080038500009000109000600008430020000500004651072107000060',\n  '072010000583006100901700283000500010005030600010008000326007501004600372000090860',\n  '070003956003006107900745000200004019040000020610200005000487001804600300157300060',\n  '004000607100076000097480005413259060070060050080713249800027910000140003201000800',\n  '004000007100006000697402135403050000072804350000010209835607914000100003200000800',\n  '000501080000000492600080035403200068070060050580003209830020004769000000040905000',\n  '024091600050300090097480135000250068902000301580013000835027910060008020001930870',\n  '200900000805400370397000002070040820038205940029030050700000296086002104000006005',\n  '214000500000400009090560012500600803008000900409007001750084090900002000002000785',\n  '010900568860400309090000012000609003008000900400807000750000090906002034142006080',\n  '051004006780600003000070004010860040003507800090031070600010000100006058500300160',\n  '301000006780600910020073004200860005400507001800031002600210030039006058500000107',\n  '050004706000000003920073084210069300003507800005430072670210039100000000502300060',\n  '007000060604009007080005104160054000803927605000810032906200040200600509070000200',\n  '507002000024130857080065000100000098003000600790000002000270040238041570000500206',\n  '017080903600139800089700020060300708000000000705006030050008340008641009401090280',\n  '007480060004030857300065020060000008043020610700000030050270001238040500070093200',\n  '300978040900000378080410659000180090005307100010095000468031020573000006020746005',\n  '300908040001652008702410009030100090005307100010005060400031907500829400020706005',\n  '350078040901050070780400650000084500200000004004290000068001027070020406020740035',\n  '006908000941000308700400050630100092200060004810005063060001007503000416000706800',\n  '701040200940800501000310974000070390073981650095030000189063000307004069004090103',\n  '701509080000800000250310904002000398073901650895000400109063045000004000060708103',\n  '701500000940807001200300970000005098400901002890600000089003005300104069000008103',\n  '700000080900800501250006074002000398073901650895000400180200045307004009060000003',\n]","export default [\n    '000700000000391204028600307205006070004907500070800402802009740609574000000008000',\n    '000064080000050930805901760068000005050000020100000640019305408084090000070410000',\n    '000700004400060000007804130506003701200050003309100205031408600000070008800002000',\n    '007401000050062100301000260010500000800000005000007040049000301006920080000103500',\n    '007004029000072003028300004010040007002000800800010090600005930200890000380700400',\n    '060007100078000040010604007000076520650203084042950000100809070080000360006700090',\n    '009000804208040060000907103000620940900473002042098000803704000060010308501000400',\n    '000500016004006300060703000030409271925000634741302090000908020003600500280005000',\n    '000805307005009060700300000050700001074903250100006070000001004030400700901607000',\n    '600700000005086000870010005183200009020000080900003412400020057000190800000007004',\n    '003029085500017009000300200835000092000000000910000756001002000200940001750180300',\n    '050978200940600070000410009607080002000000000800090703400031000070009016009746030',\n]","export default [\n'094706000006000205800005000180000479309000806467000031000400007605000300000601940',\n'004026000730014200020005000180000070309040806060000031000400050005970012000650900',\n'380000960900801700004600000148005000630104089000300142000003400003502007075000038',\n'081420005006001024720600800100090070030000080090060002009003051810500600400016230',\n'008000000009080530010376008034008020100402005020100680600815040051020800000000700',\n'084050003000837000060024009046091007000000000500640380400760030000419000600080790',\n'000000056700019800620050004100400009970508021500001008200080065009230007460000000',\n'003200709400070020002058300000009870900000003035400000007810200050040008804003600',\n'005600000709041050030925080400260800002000900007059004020184070070590408000002600',\n'000090401200017950000500370070800206053000180802001040024005000065940003908070000',\n]","export default [\n  '060089003039100006100730090020060017001000600570090020090024001600003480800610030',\n  '040007091800010504190040000060000749700000006489000050000050063607090005950600020',\n  '246009005000002070070410200000007650500000002087200000008031020060700000700500316',\n  '060008003010560009300109000406000900051000370008000204000206007600045090100800020',\n  '000700000970063150302501007800050300700608001006030005200305706013870024000004000',\n  '003006201002300690600200000100800040020564080050007006000001004061003900709600800',\n  '004030060090610304030000100000002001408561903500700000001000030705084010040070800',\n  '090070008000081952008500000001052090050000080030460200000006700674210000300040020',\n  '208700003730000000064003000340652100082109340006384025000200590000000061600001802',\n  '400000813000000465300500000200400300540207091009006004000001009924000000681000007',\n]\n","import { connect } from 'react-redux'\nimport Board from './ui/Board'\nimport { setSelectedCell, onCellSetValue, setCellValue, toggleInputType, setNoteValue, newGame, onSolve } from '../store/actions'\nimport Interface from './ui/Interface'\nimport boards from '../libs/boards';\n\nconst setValueCell = dispatch => (selected, value, cells, notesInput) => {\n    if(selected) {\n        !notesInput  ? \n        dispatch(setCellValue(selected.id, value)) :\n        dispatch(setNoteValue(selected.id, value))\n        dispatch(onCellSetValue(selected, notesInput ? 0 : value, cells))\n    }\n}\n\nconst CellsBoard = connect(\n    state =>\n        ({\n            cells: state.cells,\n            notesInput: state.game.notesInput,\n            started: state.game.started,\n            selectedCell: state.cells.find(cell => cell.selected)\n        }),\n    dispatch => \n        ({\n            selectCell(cell) {\n                cell && dispatch(setSelectedCell(cell.id, cell.value))\n            },\n            setCellValue(cell, value, cells, notesInput) {\n                setValueCell(dispatch)(cell, value, cells, notesInput)\n            },\n            toggleInput() {\n                dispatch(toggleInputType())\n            },\n            onSolve() {\n                dispatch(onSolve())\n            }\n        })\n)(Board)\n\nconst InterfaceControlls = connect(\n    state =>\n        ({\n            selectedCell: state.cells.find(cell => cell.selected),\n            cells: state.cells,\n            game: state.game\n        }),\n    dispatch =>\n        ({\n            setCellValue(cell, value, cells, notesInput) {\n                setValueCell(dispatch)(cell, value, cells, notesInput)\n            },\n            toggleInput() {\n                dispatch(toggleInputType())\n            },\n            newGame(difficulty) {\n                const board = boards[difficulty]\n                const scheme = board[Math.floor(Math.random() * board.length)]\n                                .split('')\n                                .map(item => +item)\n\n                dispatch(newGame(scheme))\n            }\n        })\n)(Interface)\n\nexport {\n    CellsBoard,\n    InterfaceControlls\n}","import React from 'react'\nimport './../styles/Game.sass'\nimport { CellsBoard, InterfaceControlls } from './Containers';\n\nconst App = () => (\n    <>\n        <div className='game'>\n            <CellsBoard/>\n            <InterfaceControlls/>\n        </div>\n    </>\n)\n\nexport default App\n","const getPositionByIndex = index => {\n    const y = Math.floor(index / 9) + 1\n    let x = index + 1\n    \n    while(x > 9) x-= 9\n\n    return {\n        y,\n        x\n    }\n} \n\nconst quad = index => ({\n    row: Math.ceil(getPositionByIndex(index).x / 3),\n    col: Math.ceil(getPositionByIndex(index).y / 3)\n})\n\nconst isQuad = (selected, current) => {\n    selected = quad(selected) \n    current = quad(current)\n    return selected.col === current.col && selected.row === current.row\n}\n\nconst isNearby = (selectedIndex, currentIndex) => {\n    if (selectedIndex >= 0 && selectedIndex !== currentIndex) {\n        const selXY = getPositionByIndex(selectedIndex) \n        const curXY = getPositionByIndex(currentIndex)\n        \n        if (curXY.x === selXY.x || curXY.y === selXY.y || isQuad(selectedIndex, currentIndex)) {\n            return true\n        } else {\n            return false\n        }\n    } else {\n        return false\n    }\n}\n\nconst getNearbyCells = (cell, cellList) =>  \n    cellList.filter(item => isNearby(cell.id, item.id))\n\n\nexport {\n    getPositionByIndex,\n    isNearby,\n    getNearbyCells\n}","const replaceItems = (arr, item, value) => {\n    let newArr = [...arr]\n    newArr[item] = value\n    return newArr\n}\n\nconst doesAddValue = (arr, value, add) => {\n    let newArr = [...arr]\n    add && newArr.push(value)\n    return newArr\n}\n\nexport {    \n    doesAddValue,\n    replaceItems\n}","/* eslint-disable no-fallthrough */\nimport c from \"./constans\";\nimport { isNearby, getNearbyCells } from \"../libs/XY\";\nimport { replaceItems } from \"../libs/arrayHelpers\";\n\nconst game = (state = {}, action) => {\n    switch(action.type) {\n        case c.TOGGLE_INPUT_MODE:\n            return {\n                ...state,\n                notesInput: !state.notesInput   \n            }\n        \n        case c.NEW_GAME:\n            return {\n                ...state,\n                started: true\n            }            \n            \n        default: \n            return state\n    }\n}\n\nconst cell = (state = {}, action) => {\n    switch(action.type) {\n        case c.SET_CELL_VALUE:\n            return (action.id !== state.id) || !state.selected || state.fixed ? \n                state :\n                {\n                    ...state,\n                    value: action.value,\n                    notes: Array(9).fill(0)\n                }\n\n        case c.SET_CELL_SELECTED:\n            return {\n                ...state,\n                selected: action.id === state.id,\n                nearby: isNearby(action.id, state.id),\n                same: !isNearby(action.id, state.id) && !!action.value && action.value === state.value\n            }\n        //im sorry\n        case c.ON_SET_VALUE:\n            return {\n                ...state,\n                same: (!!action.value && state.value === action.value && \n                        !isNearby(action.cell.id, state.id) && (!action.cell.fixed))\n                        || (action.cell.fixed && action.cell.value === state.value),\n                        \n                notes: action.cell.fixed ? \n                        state.notes :\n                        replaceItems(state.notes, state.notes.indexOf(action.value), 0),\n\n                conflict: !action.cell.fixed ? getNearbyCells(state, action.cells).some(c => {\n                    const valueToCompare = c.id === action.cell.id ? !action.cell.fixed && action.value : c.value\n                    return state.value === valueToCompare && !!valueToCompare\n                }) : state.conflict\n            }\n\n        case c.SET_NOTE_VALUE: \n            return action.id !== state.id || state.fixed ?\n                state :\n                {\n                    ...state,\n                    value: 0,\n                    notes: action.value ?\n                        replaceItems(state.notes, action.value - 1, !!~state.notes.indexOf(action.value) ? 0 : action.value) :\n                        Array(state.notes.length).fill(0)\n                }\n\n        case c.ON_SOLVE:\n        case c.NEW_GAME: \n            return {\n                ...state,\n                value: action.scheme[state.id],\n                notes: [...Array(9)].fill(0),\n                selected: false,\n                conflict: false,\n                same: false,\n                nearby: false,\n                fixed: !!action.scheme[state.id]\n            }\n        \n        default: \n            return state\n    }\n}\n\nconst cells = (state = [], action) => {\n    switch(action.type) {\n        case c.SET_CELL_VALUE:\n        case c.SET_CELL_SELECTED:\n        case c.ON_SET_VALUE:\n        case c.NEW_GAME:\n        case c.SET_NOTE_VALUE:\n        case c.ON_SOLVE:\n            return state.map(c => cell(c, action))\n\n        default: \n            return state\n    }\n}\n\nexport {\n    cells,\n    game\n}","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport * as reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst initialState = {\n    game: {\n        //     paused: false,\n        //     startTime: null,\n        //     difficulty: '',\n        started: false,\n        notesInput: false\n    },\n    cells: Array(81).fill(null).map((value, id) => ({\n        id,\n        selected: false,\n        conflict: false,\n        value: value,\n        notes: [...Array(9).fill(0)],\n        fixed: !!+value,\n    }))  \n}\n\nconst saver = store => next => action => {\n    let result = next(action)\n    localStorage['super-sudoque'] = JSON.stringify(store.getState())\n    return result\n}\n\nconst store = composeWithDevTools(applyMiddleware(saver))(createStore)(\n    combineReducers({ ...reducers }),\n    (localStorage['super-sudoque']) ?\n        JSON.parse(localStorage['super-sudoque']) :\n        initialState\n)\n\nlocalStorage['super-sudoque'] = JSON.stringify(store.getState())\n    \nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport store from './store/index';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}