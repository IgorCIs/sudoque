{"version":3,"sources":["components/ui/Notes.js","components/ui/Cell.js","hotkeys/index.js","components/ui/Board.js","store/constans.js","store/actions.js","components/ui/NewGame.js","components/ui/Numpad.js","components/ui/Controlls.js","components/ui/Interface.js","components/Containers.js","components/App.js","libs/XY.js","libs/arrayHelpers.js","store/reducers.js","store/index.js","index.js"],"names":["Note","_ref","value","react_default","a","createElement","className","Notes","_ref2","values","some","v","map","i","Notes_Note","key","Value","Cell","selected","conflict","same","nearby","notes","fixed","_ref2$onClick","onClick","f","concat","Cell_Value","ui_Notes","keyMap","Object","objectSpread","MOVE_LEFT","MOVE_RIGHT","MOVE_BOTTOM","MOVE_TOP","CHANGE_INPUT_TYPE","UNDO","Array","fill","reduce","prev","n","defineProperty","Board","cells","selectedCell","notesInput","_ref$selectCell","selectCell","_ref$setCellValue","setCellValue","_ref$toggleInput","toggleInput","hotkeys","e","id","index_es","handlers","cell","ui_Cell","assign","constans","toggleInputType","type","c","data","Easy","Medium","Hard","Expert","Option","_ref$onClick","NewGame","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","opened","toggleOpened","bind","assertThisInitialized","setState","difficulty","_this2","newGame","_this3","keys","k","NewGame_Option","startNewGame","Component","Button","Numpad","toConsumableArray","item","Numpad_Button","Toggler","text","Controlls","_ref2$clearClick","clearClick","_ref2$notesClick","notesClick","buttons","cb","button","Controlls_Toggler","Interface","game","_ref$newGame","ui_NewGame","ui_Numpad","ui_Controlls","setValueCell","dispatch","setNoteValue","onCellSetValue","CellsBoard","connect","find","InterfaceControlls","scheme","split","App","Fragment","Containers_InterfaceControlls","getPositionByIndex","index","y","Math","floor","x","quad","row","ceil","col","isNearby","selectedIndex","currentIndex","selXY","curXY","current","getNearbyCells","cellList","filter","replaceItems","arr","newArr","arguments","length","undefined","action","indexOf","valueToCompare","initialState","store","composeWithDevTools","applyMiddleware","next","result","localStorage","JSON","stringify","getState","createStore","combineReducers","reducers","parse","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.3405e99d.chunk.js","sourcesContent":["import React from 'react'\nimport '../../styles/Notes.sass'\n\nconst Note = ({ value }) => (\n    <div className='note'>\n        { +value ? value : ''}\n    </div>\n)\n\nconst Notes = ({ values }) => {\n    return (\n        values.some(v => !!v) ?\n            <div className='notes'>\n                {values.map((value, i) => \n                    <Note value={value} key={i}/>\n                )}\n            </div> : ''\n    )\n}\n\nexport default Notes","import React from 'react'\nimport '../../styles/Cell.sass'\nimport Notes from './Notes';\nimport PropTypes from 'prop-types'\n\n\nconst Value = ({ value }) => {\n    return ( \n        <div className='value'>\n            {+value ? value : ''}\n        </div>\n    )\n}\n\nconst Cell = ({ selected, conflict, same, nearby, value, notes, fixed, onClick=f=>f }) => {\n    return (\n        <div onClick={onClick}\n            className={`cell ${selected ? 'selected' : ''}\n                        ${nearby ? 'nearby' : ''}\n                        ${conflict ? 'conflict' : ''}\n                        ${same ? 'same' : ''}\n                        ${fixed ? 'fixed' : ''}\n            `}>\n            {value ? \n                <Value value={value}/>  \n                :\n                <Notes values={notes}/>\n            }\n        </div>\n    )\n}\n\nCell.propTypes = {\n    selected: PropTypes.bool,\n    conflict: PropTypes.bool,\n    same: PropTypes.bool,\n    nearby: PropTypes.bool,\n    value: PropTypes.number,\n    onClick: PropTypes.func\n}\n\nexport default Cell\n","const keyMap = {\n    MOVE_LEFT: 'left',\n    MOVE_RIGHT: 'right',\n    MOVE_BOTTOM: 'down',\n    MOVE_TOP: 'up',\n    CHANGE_INPUT_TYPE: 'n',\n    UNDO: 'backspace',\n\n    ...Array(11).fill(0).reduce((prev, n, i) => ({\n        ...prev ,[`SET_VALUE_${i - 1}`]: i - 1 + ''\n    })) \n}\n\nexport {\n    keyMap\n}   ","import React from 'react'\nimport './../../styles/Board.sass'\nimport Cell from './Cell';\nimport PropTypes from 'prop-types'\nimport { HotKeys } from 'react-hotkeys'\nimport { keyMap } from '../../hotkeys';\n\nconst Board = ({ cells, selectedCell, notesInput, selectCell=f=>f, setCellValue=f=>f, toggleInput=f=>f }) => {\n    const hotkeys = {\n        ...Array(11).fill(0).reduce((prev, n, i) => ({\n            ...prev,\n            [`SET_VALUE_${i - 1}`]: e => setCellValue(selectedCell, i - 1, cells, notesInput)\n        })),\n        MOVE_LEFT: () => selectCell(cells[selectedCell.id - 1]),\n        MOVE_RIGHT: () => selectCell(cells[selectedCell.id + 1]),\n        MOVE_BOTTOM: () => selectCell(cells[selectedCell.id + 9]),\n        MOVE_TOP: () => selectCell(cells[selectedCell.id - 9]),\n        CHANGE_INPUT_TYPE: () => toggleInput(),\n    }\n\n    return (\n        <HotKeys className='board' handlers={hotkeys} keyMap={keyMap}>\n            {cells.map(cell => (\n                <Cell {...cell}\n                    onClick={() => selectCell(cell)}\n                    key={cell.id}\n                />\n            ))}\n        </HotKeys>\n    )\n}\n\nBoard.propTypes = {\n    cells: PropTypes.array,\n    notesInput: PropTypes.bool,\n    selectCell: PropTypes.func,\n    setCellValue: PropTypes.func,\n    toggleInput: PropTypes.func,\n    selectedCell: PropTypes.object,\n}\n\nexport default Board\n","export default {\n    SET_CELL_VALUE: 'SET_CELL_VALUE',\n    ON_SET_VALUE: 'ON_SET_VALUE', \n    SET_NOTE_VALUE: 'SET_NOTE_VALUE', \n    SET_CELL_SELECTED: 'SET_CELL_SELECTED',\n    TOGGLE_INPUT_MODE: 'TOGGLE_INPUT_MODE', \n    CHECK_NEARBY_CELLS: 'CHECK_NEARBY_CELLS',\n    START_GAME: 'START_GAME',\n    NEW_GAME: 'NEW_GAME',\n\n    DIFFICULTY_EASY: 'DIFFICULTY_EASY',\n    DIFFICULTY_MEDIUM: 'DIFFICULTY_MEDIUM',\n    DIFFICULTY_HARD: 'DIFFICULTY_HARD',\n    DIFFICULTY_EXPERT: 'DIFFICULTY_EXPERT',\n}","import c from \"./constans\";\n\nconst setCellValue = (id, value) =>\n    ({\n        type: c.SET_CELL_VALUE,\n        id,\n        value\n    })\n\nconst onCellSetValue = (cell, value, cells) => \n    ({\n        type: c.ON_SET_VALUE,\n        cell,\n        value,\n        cells\n    })\n\nconst setSelectedCell = (id, value) =>\n    ({\n        type: c.SET_CELL_SELECTED,\n        id,\n        value\n    })\n\nconst toggleInputType = () => \n    ({\n        type: c.TOGGLE_INPUT_MODE\n    })\n\nconst setNoteValue = (id, value) => \n    ({\n        type: c.SET_NOTE_VALUE,\n        id,\n        value \n    })\n\nconst newGame = (scheme) => \n    ({\n        type: c.NEW_GAME,\n        scheme\n    })\n\nexport {\n    setCellValue,\n    setSelectedCell,\n    onCellSetValue,\n    toggleInputType,\n    setNoteValue,\n    newGame\n}","import React, { Component } from 'react'\nimport './../../styles/InterfaceControlls/NewGame.sass'\n\nconst data = {\n    Easy: 'easy',\n    Medium: 'medium',\n    Hard: 'hard',\n    Expert: 'expert',\n}\n\nconst Option = ({ value, onClick=f=>f }) => (\n    <li onClick={onClick} className='option'>\n        {value}\n    </li>\n)\n\nclass NewGame extends Component {\n    constructor(props) {\n        super(props)\n\n        \n        this.state = {\n            opened: false\n        }\n        this.toggleOpened = this.toggleOpened.bind(this)\n    }\n    \n    toggleOpened() {\n        this.setState(state => ({ opened: !state.opened }))\n    }\n\n    startNewGame(difficulty) {\n        return () => {\n            this.props.newGame(difficulty)\n            this.toggleOpened()\n        }\n    }\n\n    render() {\n        const { opened } = this.state\n        \n        return (\n            <div className='newGame'>\n                <div className='button' onClick={this.toggleOpened}> New Game </div>            \n                {opened ?\n                    <ul className='options'>\n                        {Object.keys(data).map((k, i) => (\n                            <Option value={k}   \n                                    onClick={this.startNewGame(data[k])}\n                                    key={i}\n                            />\n                        ))} \n                        <Option value={'cancel'} onClick={this.toggleOpened}/>\n                    </ul> : ''\n                }\n            </div>\n        )\n    } \n}\n\n\nexport default NewGame\n","import React from 'react'\nimport '././../../styles/InterfaceControlls/Numpad.sass'\n\nconst Button = ({ onClick=f=>f, id }) => (\n    <div onClick={onClick} className='item'>\n        {id}\n    </div>\n)\n\nconst Numpad = ({ onClick=f=>f }) => {\n    return (\n        <div className='numpad'>\n            {[...Array(9)].map((item, i) => (\n                <Button key={i}\n                        id={i + 1}\n                        onClick={() => onClick(i + 1)}\n                ></Button>\n            ))}\n        </div>\n    )\n}\n\nexport default Numpad\n\n\n","import React from 'react'\nimport './../../styles/InterfaceControlls/Togglers.sass'\n\n\nconst Toggler = ({ type, text, onClick }) => (\n    <div onClick={onClick} className={`toggler ${type}`}>\n        <div className=\"logo\"></div>\n        <div className=\"text\"> {text} </div>\n\n    </div>\n)\n\nconst Controlls = ({ clearClick=f=>f, notesClick=f=>f, notesInput}) => {\n    const buttons = [\n        {\n            text: 'Notes',\n            type: `notes ${notesInput ? 'active' : ''}`,\n            cb: notesClick\n        },\n        {\n            text: 'Tip',\n            type: 'tip',\n            cb: f=>f\n        },\n        {\n            text: 'Undo',\n            type: 'undo',\n            cb: f=>f\n        },\n        {\n            text: 'Clear',\n            type: 'clear',\n            cb: clearClick \n        },\n    ]\n\n    return (\n        <div className='controlls'>\n            {Object.keys(buttons).map((button, i) => (\n                <Toggler type={buttons[button].type}\n                        key={i}\n                        text={buttons[button].text}\n                        onClick={buttons[button].cb}\n                />\n            ))\n            }        \n        </div>\n    )\n}\n\nexport default Controlls\n","\nimport React from 'react'\nimport NewGame from './NewGame';\nimport Numpad from './Numpad';\nimport Controlls from './Controlls';\nimport './../../styles/InterfaceControlls/InterfaceControlls.sass'\n\nconst Interface = ({ selectedCell, cells, game, newGame=f=>f, toggleInput=f=>f, setCellValue=f=>f }) => {\n    return (\n        <div className='interfaceControlls'>\n            <NewGame newGame={newGame}/>\n            <Numpad onClick={value => selectedCell && setCellValue(selectedCell, value, cells, game.notesInput)}/>\n            <Controlls \n                    clearClick={() => selectedCell && setCellValue(selectedCell, 0, cells, game.notesInput)}\n                    notesClick={toggleInput}\n                    {...game}\n            />\n        </div>\n    )\n}\n\nexport default Interface\n","import { connect } from 'react-redux'\nimport Board from './ui/Board';\nimport { setSelectedCell, onCellSetValue, setCellValue, toggleInputType, setNoteValue, newGame } from '../store/actions';\nimport Interface from './ui/Interface';\n\nconst setValueCell = dispatch => (cell, value, cells, notesInput) => {\n    !notesInput ? \n    dispatch(setCellValue(cell.id, value)) :\n    dispatch(setNoteValue(cell.id, value))\n    dispatch(onCellSetValue(cell, notesInput ? 0 : value, cells))\n}\n\nconst CellsBoard = connect(\n    state =>\n        ({\n            cells: state.cells,\n            notesInput: state.game.notesInput,\n            selectedCell: state.cells.find(cell => cell.selected)\n        }),\n    dispatch => \n    ({\n            selectCell(cell) {\n                cell && dispatch(setSelectedCell(cell.id, cell.value))\n            },\n            setCellValue(cell, value, cells, notesInput) {\n                setValueCell(dispatch)(cell, value, cells, notesInput)\n            },\n            toggleInput() {\n                dispatch(toggleInputType())\n            }\n        })\n)(Board)\n\nconst InterfaceControlls = connect(\n    state =>\n        ({\n            selectedCell: state.cells.find(cell => cell.selected),\n            cells: state.cells,\n            game: state.game\n        }),\n    dispatch =>     \n        ({\n            setCellValue(cell, value, cells, notesInput) {\n                setValueCell(dispatch)(cell, value, cells, notesInput)\n            },\n            toggleInput() {\n                dispatch(toggleInputType())\n            },\n            newGame(difficulty) {\n                dispatch(newGame('370680000100074803008100060720040630030802010015060049080006400403720001000018026'.split('').map(v => +v)))\n            }\n        })\n)(Interface)\n\nexport {\n    CellsBoard,\n    InterfaceControlls\n}","import React from 'react'\nimport './../styles/Game.sass'\nimport { CellsBoard, InterfaceControlls } from './Containers';\n\nconst App = () => (\n    <>\n        <div className='game'>\n            <CellsBoard/>\n            <InterfaceControlls/>\n        </div>\n    </>\n)\n\nexport default App\n","const getPositionByIndex = index => {\n    const y = Math.floor(index / 9) + 1\n    let x = index + 1\n    \n    while(x > 9) x-= 9\n\n    return {\n        y,\n        x\n    }\n} \n\nconst quad = index => ({\n    row: Math.ceil(getPositionByIndex(index).x / 3),\n    col: Math.ceil(getPositionByIndex(index).y / 3)\n})\n\nconst isQuad = (selected, current) => {\n    selected = quad(selected) \n    current = quad(current)\n    return selected.col === current.col && selected.row === current.row\n}\n\nconst isNearby = (selectedIndex, currentIndex) => {\n    if (selectedIndex >= 0 && selectedIndex !== currentIndex) {\n        const selXY = getPositionByIndex(selectedIndex) \n        const curXY = getPositionByIndex(currentIndex)\n        \n        if (curXY.x === selXY.x || curXY.y === selXY.y || isQuad(selectedIndex, currentIndex)) {\n            return true\n        } else {\n            return false\n        }\n    } else {\n        return false\n    }\n}\n\nconst getNearbyCells = (cell, cellList) =>  \n    cellList.filter(item => isNearby(cell.id, item.id))\n\n\nexport {\n    getPositionByIndex,\n    isNearby,\n    getNearbyCells\n}","const replaceItems = (arr, item, value) => {\n    let newArr = [...arr]\n    newArr[item] = value\n    return newArr\n}\n\nconst doesAddValue = (arr, value, add) => {\n    let newArr = [...arr]\n    add && newArr.push(value)\n    return newArr\n}\n\nexport {    \n    doesAddValue,\n    replaceItems\n}","/* eslint-disable no-fallthrough */\nimport c from \"./constans\";\nimport { isNearby, getNearbyCells } from \"../libs/XY\";\nimport { replaceItems } from \"../libs/arrayHelpers\";\n\nconst game = (state = {}, action) => {\n    switch(action.type) {\n        case c.TOGGLE_INPUT_MODE:\n            return {\n                ...state,\n                notesInput: !state.notesInput   \n            }\n        \n        default: \n            return state\n    }\n}\n\nconst cell = (state = {}, action) => {\n    switch(action.type) {\n        case c.SET_CELL_VALUE:\n            return (action.id !== state.id) || !state.selected || state.fixed ? \n                state :\n                {\n                    ...state,\n                    value: action.value,\n                    notes: Array(9).fill(0)\n                }\n\n        case c.SET_CELL_SELECTED:\n            return {\n                ...state,\n                selected: action.id === state.id,\n                nearby: isNearby(action.id, state.id),\n                same: !isNearby(action.id, state.id) && !!action.value && action.value === state.value\n            }\n        //im sorry\n        case c.ON_SET_VALUE:\n            return {\n                ...state,\n                same: (!!action.value && state.value === action.value && \n                        !isNearby(action.cell.id, state.id) && (!action.cell.fixed))\n                        || (action.cell.fixed && action.cell.value === state.value),\n                        \n                notes: action.cell.fixed ? \n                        state.notes :\n                        replaceItems(state.notes, state.notes.indexOf(action.value), 0),\n\n                conflict: !action.cell.fixed ? getNearbyCells(state, action.cells).some(c => {\n                    const valueToCompare = c.id === action.cell.id ? !action.cell.fixed && action.value : c.value\n                    return state.value === valueToCompare && !!valueToCompare\n                }) : state.conflict\n            }\n\n        case c.SET_NOTE_VALUE: \n            return action.id !== state.id || state.fixed ?\n                state :\n                {\n                    ...state,\n                    value: 0,\n                    notes: action.value ?\n                        replaceItems(state.notes, action.value - 1, !!~state.notes.indexOf(action.value) ? 0 : action.value) :\n                        Array(state.notes.length).fill(0)\n                }\n\n        case c.NEW_GAME: \n            return {\n                ...state,\n                value: action.scheme[state.id],\n                notes: [...Array(9)].fill(0),\n                selected: false,\n                conflict: false,\n                fixed: !!action.scheme[state.id]\n            }\n        \n        default: \n            return state\n    }\n}\n\nconst cells = (state = [], action) => {\n    switch(action.type) {\n        case c.SET_CELL_VALUE:\n        case c.SET_CELL_SELECTED:\n        case c.ON_SET_VALUE:\n        case c.NEW_GAME:\n        case c.SET_NOTE_VALUE:\n            return state.map(c => cell(c, action))\n\n        default: \n            return state\n    }\n}\n\nexport {\n    cells,\n    game\n}","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport * as reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst initialState = {\n    game: {\n    //     started: false,\n    //     paused: false,\n    //     startTime: null,\n    //     difficulty: '',\n        notesInput: false\n    },\n    cells: Array(81).fill(0).map((value, id) => ({\n        id,\n        selected: false,\n        conflict: false,\n        value: +value,\n        notes: [...Array(9).fill(0)],\n        fixed: !!+value,\n    }))  \n}\n\nconst saver = store => next => action => {\n    let result = next(action)\n    localStorage['super-sudoque'] = JSON.stringify(store.getState())\n    return result\n}\n\nconst store = composeWithDevTools(applyMiddleware(saver))(createStore)(\n    combineReducers({ ...reducers }),\n    (localStorage['super-sudoque']) ?\n        JSON.parse(localStorage['super-sudoque']) :\n        initialState\n)\n\nlocalStorage['super-sudoque'] = JSON.stringify(store.getState())\n    \nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport store from './store/index';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}